import asyncio
import logging
import psycopg2
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

TOKEN = "7927535008:AAFAKK1ERU_ETk3TmwY3JNYHNz6TK29pJqI"

DB_CONFIG = {
    "dbname": "postgres",
    "user": "postgres",
    "password": "your_password",
    "host": "localhost",
    "port": "5432"
}

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

class RecipeState(StatesGroup):
    adding = State()
    deleting = State()
    searching = State()
    selecting = State()

def get_db_connection():
    return psycopg2.connect(**DB_CONFIG)

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç"), KeyboardButton(text="–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")],
        [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç")],
        [KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç")
async def add_recipe(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(RecipeState.adding)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ä–µ—Ü–µ–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ; –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é); –û–ø–∏—Å–∞–Ω–∏–µ**")

@dp.message(RecipeState.adding)
async def save_recipe(message: types.Message, state: FSMContext):
    parts = message.text.split(";")
    if len(parts) != 3:
        await message.answer("–û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: **–ù–∞–∑–≤–∞–Ω–∏–µ; –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã; –û–ø–∏—Å–∞–Ω–∏–µ**")
        return

    name, ingredients, description = map(str.strip, parts)

    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute(
            "INSERT INTO recipes (name, ingredients, description) VALUES (%s, %s, %s)",
            (name, ingredients, description)
        )
        conn.commit()
        await message.answer(f"‚úÖ –†–µ—Ü–µ–ø—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=keyboard)
    except psycopg2.IntegrityError:
        conn.rollback()
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –†–µ—Ü–µ–ø—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        cur.close()
        conn.close()

    await state.clear()

@dp.message(F.text.lower() == "—Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")
async def random_recipe(message: types.Message, state: FSMContext):
    await state.clear()
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT name, ingredients, description FROM recipes ORDER BY RANDOM() LIMIT 1")
    recipe = cur.fetchone()
    cur.close()
    conn.close()

    if recipe:
        await message.answer(f"üìå **{recipe[0]}**\n\nüìù {recipe[2]}\n\nüçΩ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {recipe[1]}")
    else:
        await message.answer("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤!")

@dp.message(F.text.lower() == "—Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤")
async def list_recipes(message: types.Message, state: FSMContext):
    await state.clear()
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT name FROM recipes")
    recipes = cur.fetchall()
    cur.close()
    conn.close()

    if recipes:
        recipe_list = "\n".join([f"üìå {r[0]}" for r in recipes])
        await message.answer(f"üìñ **–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤:**\n{recipe_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.", reply_markup=keyboard)
        await state.set_state(RecipeState.selecting)
    else:
        await message.answer("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤!")

@dp.message(RecipeState.selecting)
async def select_recipe(message: types.Message, state: FSMContext):
    recipe_name = message.text.strip()

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT name, ingredients, description FROM recipes WHERE name = %s", (recipe_name,))
    recipe = cur.fetchone()
    cur.close()
    conn.close()

    if recipe:
        await message.answer(f"üìå **{recipe[0]}**\n\nüìù {recipe[2]}\n\nüçΩ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {recipe[1]}")
    else:
        await message.answer(f"‚ùå –†–µ—Ü–µ–ø—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{recipe_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    await state.clear()

@dp.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç")
async def delete_recipe(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(RecipeState.deleting)
    await message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.")

@dp.message(RecipeState.deleting)
async def delete_recipe_by_name(message: types.Message, state: FSMContext):
    recipe_name = message.text.strip()

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id FROM recipes WHERE name = %s", (recipe_name,))
    recipe = cur.fetchone()

    if recipe:
        cur.execute("DELETE FROM recipes WHERE name = %s", (recipe_name,))
        conn.commit()
        await message.answer(f"üóë –†–µ—Ü–µ–ø—Ç '{recipe_name}' —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ùå –†–µ—Ü–µ–ø—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{recipe_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    cur.close()
    conn.close()
    await state.clear()

@dp.message(F.text.lower() == "–ø–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É")
async def search_recipe(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(RecipeState.searching)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã.")

@dp.message(RecipeState.searching)
async def search_by_ingredient(message: types.Message, state: FSMContext):
    ingredient = message.text.strip().lower()

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT name, ingredients, description FROM recipes WHERE LOWER(ingredients) LIKE %s", (f"%{ingredient}%",))
    recipes = cur.fetchall()
    cur.close()
    conn.close()

    if recipes:
        response = "\n\n".join([f"üìå **{r[0]}**\nüìù {r[2]}\nüçΩ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {r[1]}" for r in recipes])
        await message.answer(response)
    else:
        await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º '{ingredient}'.")

    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
